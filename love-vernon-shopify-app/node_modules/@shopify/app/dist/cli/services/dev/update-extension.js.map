{"version":3,"file":"update-extension.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/update-extension.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,4BAA4B,GAE7B,MAAM,mCAAmC,CAAA;AAE1C,OAAO,EAAC,0BAA0B,EAAE,sBAAsB,EAAC,MAAM,4BAA4B,CAAA;AAE7F,OAAO,EAAC,eAAe,EAAC,MAAM,oCAAoC,CAAA;AAClE,OAAO,EAAC,UAAU,EAAC,MAAM,6BAA6B,CAAA;AACtD,OAAO,EAAC,QAAQ,EAAC,MAAM,0BAA0B,CAAA;AACjD,OAAO,EAAC,WAAW,EAAgB,MAAM,8BAA8B,CAAA;AAWvE,MAAM,CAAC,KAAK,UAAU,oBAAoB,CAAC,EACzC,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,MAAM,GACsB;IAC5B,MAAM,OAAO,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAA;IAC1D,IAAI,CAAC,OAAO;QAAE,OAAM;IACpB,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;IAE3D,MAAM,cAAc,GAA8B;QAChD,MAAM;QACN,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC;YACrB,GAAG,CAAC,MAAM,SAAS,CAAC,YAAY,EAAE,CAAC;YACnC,iBAAiB,EAAE,WAAW;SAC/B,CAAC;QACF,OAAO,EAAE,SAAS;QAClB,cAAc;KACf,CAAA;IACD,MAAM,QAAQ,GAAG,4BAA4B,CAAA;IAE7C,MAAM,cAAc,GAA0B,MAAM,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,cAAc,CAAC,CAAA;IACpG,IAAI,cAAc,CAAC,oBAAoB,EAAE,UAAU,EAAE,MAAM,GAAG,CAAC,EAAE;QAC/D,MAAM,MAAM,GAAG,cAAc,CAAC,oBAAoB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACtG,MAAM,CAAC,KAAK,CAAC,gCAAgC,MAAM,EAAE,CAAC,CAAA;KACvD;SAAM;QACL,WAAW,CAAC,8CAA8C,SAAS,CAAC,eAAe,EAAE,CAAC,CAAA;KACvF;AACH,CAAC;AAWD,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,EAC1C,SAAS,EACT,KAAK,EACL,MAAM,EACN,cAAc,EACd,MAAM,EACN,cAAc,GACe;IAC7B,MAAM,KAAK,GAAG,CAAC,YAA2B,EAAE,EAAE;QAC5C,MAAM,IAAI,UAAU,CAAC,YAAY,CAAC,CAAA;IACpC,CAAC,CAAA;IAED,MAAM,aAAa,GAAG,MAAM,0BAA0B,CAAC,cAAc,EAAE,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAE1G,IAAI,CAAC,aAAa,EAAE;QAClB,OAAM;KACP;IAED,MAAM,aAAa,GAAG,MAAM,sBAAsB,CAAC,aAAa,CAAC,MAAM,EAAE,SAAS,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAA;IAC5G,kDAAkD;IAClD,SAAS,CAAC,aAAa,GAAG,aAAa,CAAA;IACvC,OAAO,oBAAoB,CAAC,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,cAAc,EAAE,MAAM,EAAC,CAAC,CAAA;AACjF,CAAC","sourcesContent":["import {\n  ExtensionUpdateDraftInput,\n  ExtensionUpdateDraftMutation,\n  ExtensionUpdateSchema,\n} from '../../api/graphql/update_draft.js'\nimport {UIExtension} from '../../models/app/extensions.js'\nimport {findSpecificationForConfig, parseConfigurationFile} from '../../models/app/loader.js'\nimport {UIExtensionSpec} from '../../models/extensions/ui.js'\nimport {partnersRequest} from '@shopify/cli-kit/node/api/partners'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {readFile} from '@shopify/cli-kit/node/fs'\nimport {outputDebug, OutputMessage} from '@shopify/cli-kit/node/output'\nimport {Writable} from 'stream'\n\ninterface UpdateExtensionDraftOptions {\n  extension: UIExtension\n  token: string\n  apiKey: string\n  registrationId: string\n  stderr: Writable\n}\n\nexport async function updateExtensionDraft({\n  extension,\n  token,\n  apiKey,\n  registrationId,\n  stderr,\n}: UpdateExtensionDraftOptions) {\n  const content = await readFile(extension.outputBundlePath)\n  if (!content) return\n  const encodedFile = Buffer.from(content).toString('base64')\n\n  const extensionInput: ExtensionUpdateDraftInput = {\n    apiKey,\n    config: JSON.stringify({\n      ...(await extension.deployConfig()),\n      serialized_script: encodedFile,\n    }),\n    context: undefined,\n    registrationId,\n  }\n  const mutation = ExtensionUpdateDraftMutation\n\n  const mutationResult: ExtensionUpdateSchema = await partnersRequest(mutation, token, extensionInput)\n  if (mutationResult.extensionUpdateDraft?.userErrors?.length > 0) {\n    const errors = mutationResult.extensionUpdateDraft.userErrors.map((error) => error.message).join(', ')\n    stderr.write(`Error while updating drafts: ${errors}`)\n  } else {\n    outputDebug(`Drafts updated successfully for extension: ${extension.localIdentifier}`)\n  }\n}\n\ninterface UpdateExtensionConfigOptions {\n  extension: UIExtension\n  token: string\n  apiKey: string\n  registrationId: string\n  stderr: Writable\n  specifications: UIExtensionSpec[]\n}\n\nexport async function updateExtensionConfig({\n  extension,\n  token,\n  apiKey,\n  registrationId,\n  stderr,\n  specifications,\n}: UpdateExtensionConfigOptions) {\n  const abort = (errorMessage: OutputMessage) => {\n    throw new AbortError(errorMessage)\n  }\n\n  const specification = await findSpecificationForConfig(specifications, extension.configurationPath, abort)\n\n  if (!specification) {\n    return\n  }\n\n  const configuration = await parseConfigurationFile(specification.schema, extension.configurationPath, abort)\n  // eslint-disable-next-line require-atomic-updates\n  extension.configuration = configuration\n  return updateExtensionDraft({extension, token, apiKey, registrationId, stderr})\n}\n"]}